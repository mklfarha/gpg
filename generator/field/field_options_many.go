package field

import (
	"fmt"

	"github.com/maykel/gpg/entity"
	"github.com/maykel/gpg/generator/helpers"
)

func OptionsManyFieldTemplate(f entity.Field, e entity.Entity, prefix *string) Template {
	name := f.Identifier
	if prefix != nil {
		name = fmt.Sprintf("%s_%s", *prefix, f.Identifier)
	}
	graphRequired := ""
	if f.Required {
		graphRequired = "!"
	}

	protoType := helpers.ToCamelCase(fmt.Sprintf("%s_%s", e.Identifier, f.Identifier))

	return Template{
		Identifier:          f.Identifier,
		Name:                helpers.ToCamelCase(f.Identifier),
		Type:                fmt.Sprintf("[]%s", helpers.ToCamelCase(name)),
		IsPrimary:           f.StorageConfig.PrimaryKey,
		Required:            f.Required,
		Tags:                helpers.ResolveTags(f),
		Import:              nil,
		Custom:              true,
		Generated:           f.Autogenerated.Type != entity.InvalidAutogeneratedType,
		GeneratedFuncInsert: resolveGeneratedFuncInsert(e, f),
		GeneratedFuncUpdate: resolveGeneratedFuncUpdate(e, f),
		Enum:                true,
		GraphName:           f.Identifier,
		GraphModelName:      helpers.ToCamelCase(f.Identifier),
		GraphInType:         fmt.Sprintf("[String]%s", graphRequired),
		GraphInTypeOptional: "[String]",
		GraphOutType:        fmt.Sprintf("[String]%s", graphRequired),
		GraphGenType:        "[]string",
		ProtoType:           fmt.Sprintf("repeated %s", protoType),
		ProtoName:           helpers.ToSnakeCase(f.Identifier),
		ProtoEnumOptions:    helpers.ProtoEnumOptions(protoType, f.OptionValues),
	}
}
