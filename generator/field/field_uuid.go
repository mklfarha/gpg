package field

import (
	"fmt"
	"strings"

	"github.com/iancoleman/strcase"
	"github.com/maykel/gpg/entity"
	"github.com/maykel/gpg/generator/helpers"
)

func UUIDFieldTemplate(f entity.Field, e entity.Entity) Template {
	graphRequired := ""
	if f.Required {
		graphRequired = "!"
	}

	graphModelName := strings.ReplaceAll(helpers.ToCamelCase(f.Identifier), "Id", "ID")
	graphModelName = strings.ReplaceAll(graphModelName, "Uuid", "UUID")

	graphGenToMapper := fmt.Sprintf("i.%s.String()", helpers.ToCamelCase(f.Identifier))
	graphGenFromMapper := fmt.Sprintf("uuid.FromStringOrNil(i.%s)", graphModelName)
	graphGenFromMapperOptional := fmt.Sprintf("UuidFromPointerString(i.%s)", graphModelName)
	graphGenFromMapperParam := fmt.Sprintf("uuid.FromStringOrNil(%s)", f.Identifier)
	graphGenType := "string"

	if !f.Required {
		graphGenToMapper = fmt.Sprintf("UuidToPointerString(i.%s)", helpers.ToCamelCase(f.Identifier))
		graphGenFromMapper = graphGenFromMapperOptional
		graphGenFromMapperParam = fmt.Sprintf("mapper.UuidFromPointerString(%s)", f.Identifier)
		graphGenType = "*string"
	}

	graphInType := fmt.Sprintf("ID%s", graphRequired)
	if f.StorageConfig.PrimaryKey {
		graphInType = "ID"
		graphGenFromMapper = fmt.Sprintf("UuidFromPointerString(i.%s)", graphModelName)
		graphGenFromMapperParam = fmt.Sprintf("mapper.UuidFromPointerString(%s)", f.Identifier)
		graphGenType = "*string"
	}
	imp := "github.com/gofrs/uuid"
	return Template{
		Identifier:                 f.Identifier,
		Name:                       helpers.ToCamelCase(f.Identifier),
		Type:                       "uuid.UUID",
		EntityIdentifier:           e.Identifier,
		InternalType:               entity.UUIDFieldType,
		IsPrimary:                  f.StorageConfig.PrimaryKey,
		Required:                   f.Required,
		Tags:                       helpers.ResolveTags(f),
		Import:                     &imp,
		Custom:                     false,
		Generated:                  f.Autogenerated.Type != entity.InvalidAutogeneratedType,
		GeneratedFuncInsert:        resolveGeneratedFuncInsert(e, f),
		GeneratedFuncUpdate:        resolveGeneratedFuncUpdate(e, f),
		RepoToMapper:               ".String()",
		RepoFromMapper:             fmt.Sprintf("uuid.FromStringOrNil(model.%s)", helpers.ToCamelCase(f.Identifier)),
		GraphName:                  strings.ReplaceAll(f.Identifier, "Uuid", "UUID"),
		GraphModelName:             graphModelName,
		GraphInType:                graphInType,
		GraphInTypeOptional:        "ID",
		GraphOutType:               fmt.Sprintf("ID%s", graphRequired),
		GraphGenType:               graphGenType,
		GraphGenToMapper:           graphGenToMapper,
		GraphGenFromMapperParam:    graphGenFromMapperParam,
		GraphGenFromMapper:         graphGenFromMapper,
		GraphGenFromMapperOptional: graphGenFromMapperOptional,
		ProtoType:                  "string",
		ProtoName:                  helpers.ToSnakeCase(f.Identifier),
		ProtoToMapper:              fmt.Sprintf("e.%s.String()", helpers.ToCamelCase(f.Identifier)),
		ProtoFromMapper:            fmt.Sprintf("uuid.FromStringOrNil(m.Get%s())", strcase.ToCamel(f.Identifier)),
		ProtoGenName:               strcase.ToCamel(f.Identifier),
	}
}
