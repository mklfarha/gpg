package field

import (
	"fmt"
	"strings"

	"github.com/gertd/go-pluralize"
	"github.com/iancoleman/strcase"
	"github.com/maykel/gpg/entity"
	"github.com/maykel/gpg/generator/helpers"
)

func JSONFieldTemplate(f entity.Field, e entity.Entity, prefix *string) Template {
	pl := pluralize.NewClient()
	singularIdentifier := pl.Singular(f.Identifier)
	if prefix != nil {
		singularIdentifier = fmt.Sprintf("%s_%s", *prefix, singularIdentifier)
	}
	graphRequired := ""
	if f.Required {
		graphRequired = "!"
	}

	jsonMany := f.JSONConfig.Type == entity.ManyJSONConfigType
	fieldType := helpers.ToCamelCase(singularIdentifier)
	graphInTypeOptional := fmt.Sprintf("%s%sInput", helpers.ToCamelCase(e.Identifier), helpers.ToCamelCase(singularIdentifier))
	graphOutType := fmt.Sprintf("%s%s", helpers.ToCamelCase(e.Identifier), helpers.ToCamelCase(singularIdentifier))
	protoType := helpers.ToCamelCase(singularIdentifier)
	if jsonMany {
		fieldType = fmt.Sprintf("%sCollection", fieldType)
		graphInTypeOptional = fmt.Sprintf("[%s]", graphInTypeOptional)
		graphOutType = fmt.Sprintf("[%s]", graphOutType)
	}

	graphInType := fmt.Sprintf("%s%s", graphInTypeOptional, graphRequired)
	graphOutType = fmt.Sprintf("%s%s", graphOutType, graphRequired)

	if len(f.JSONConfig.Fields) == 0 {
		stringTemplate := StringFieldTemplate(f, e)
		stringTemplate.Type = "json.RawMessage"
		stringTemplate.JSONRaw = true
		stringTemplate.GraphGenToMapper = fmt.Sprintf("StringFromJsonRaw(%s)", stringTemplate.GraphGenToMapper)
		stringTemplate.GraphGenFromMapper = strings.ReplaceAll(stringTemplate.GraphGenFromMapper, "StringFromPointer", "JsonRawFromString")
		stringTemplate.GraphGenFromMapperOptional = strings.ReplaceAll(stringTemplate.GraphGenFromMapperOptional, "StringFromPointer", "JsonRawFromString")
		stringTemplate.ProtoToMapper = fmt.Sprintf("mapper.JSONRawToString(%s)", stringTemplate.ProtoToMapper)
		stringTemplate.ProtoFromMapper = fmt.Sprintf("mapper.StringToJSONRaw(%s)", stringTemplate.ProtoFromMapper)
		return stringTemplate
	}

	return Template{
		Identifier:                 singularIdentifier,
		Name:                       helpers.ToCamelCase(f.Identifier),
		Type:                       fieldType,
		InternalType:               entity.JSONFieldType,
		IsPrimary:                  f.StorageConfig.PrimaryKey,
		Required:                   f.Required,
		Tags:                       helpers.ResolveTags(f),
		Import:                     nil,
		JSON:                       true,
		JSONMany:                   jsonMany,
		Custom:                     true,
		Generated:                  f.Autogenerated.Type != entity.InvalidAutogeneratedType,
		GeneratedFuncInsert:        resolveGeneratedFuncInsert(e, f),
		GeneratedFuncUpdate:        resolveGeneratedFuncUpdate(e, f),
		RepoToMapper:               fmt.Sprintf(".%sToJSON()", helpers.ToCamelCase(singularIdentifier)),
		RepoFromMapper:             fmt.Sprintf("entity.%sFromJSON(model.%s)", helpers.ToCamelCase(singularIdentifier), helpers.ToCamelCase(f.Identifier)),
		GraphName:                  singularIdentifier,
		GraphModelName:             helpers.ToCamelCase(singularIdentifier),
		GraphInType:                graphInType,
		GraphInTypeOptional:        graphInTypeOptional,
		GraphOutType:               graphOutType,
		GraphGenType:               fmt.Sprintf("%s%s", helpers.ToCamelCase(e.Identifier), helpers.ToCamelCase(singularIdentifier)),
		GraphGenToMapper:           fmt.Sprintf("Map%s%s(i.%s)", helpers.ToCamelCase(e.Identifier), helpers.ToCamelCase(singularIdentifier), helpers.ToCamelCase(singularIdentifier)),
		GraphGenFromMapperParam:    "",
		GraphGenFromMapper:         fmt.Sprintf("Map%s%sInput(i.%s)", helpers.ToCamelCase(e.Identifier), helpers.ToCamelCase(singularIdentifier), helpers.ToCamelCase(singularIdentifier)),
		GraphGenFromMapperOptional: fmt.Sprintf("Map%s%sInput(i.%s)", helpers.ToCamelCase(e.Identifier), helpers.ToCamelCase(singularIdentifier), helpers.ToCamelCase(singularIdentifier)),
		ProtoType:                  protoType,
		ProtoName:                  helpers.ToSnakeCase(f.Identifier),
		ProtoGenName:               strcase.ToCamel(f.Identifier),
		ProtoToMapper:              fmt.Sprintf("%sSliceToProto(e.%s)", helpers.ToCamelCase(f.Identifier), helpers.ToCamelCase(f.Identifier)),
		ProtoFromMapper:            fmt.Sprintf("%sSliceFromProto(m.Get%s())", helpers.ToCamelCase(f.Identifier), strcase.ToCamel(f.Identifier)),
	}
}
