package field

import (
	"fmt"

	"github.com/maykel/gpg/entity"
	"github.com/maykel/gpg/generator/helpers"
)

func resolveGeneratedFuncInsert(e entity.Entity, f entity.Field) string {
	switch f.Autogenerated.Type {
	case entity.UUIDAutogeneratedType:
		return "custom.GenerateUUID()"
	case entity.EncryptAutogeneratedType:
		return fmt.Sprintf("custom.Encrypt(req.%s.%s)", helpers.ToCamelCase(e.Identifier), helpers.ToCamelCase(f.Identifier))
	case entity.InsertCurrentTimestampAutogeneratedType, entity.UpdateCurrentTimestampAutogeneratedType:
		return "custom.Now()"
	case entity.CustomAutogeneratedType:
		return fmt.Sprintf("custom.%s%s%sInsert(req)", helpers.ToCamelCase(e.Identifier), helpers.ToCamelCase(f.Identifier), f.Autogenerated.FuncName)
	}
	return ""
}

func resolveGeneratedFuncUpdate(e entity.Entity, f entity.Field) string {
	switch f.Autogenerated.Type {
	case entity.UUIDAutogeneratedType:
		return fmt.Sprintf("req.%s.%s", helpers.ToCamelCase(e.Identifier), helpers.ToCamelCase(f.Identifier))
	case entity.EncryptAutogeneratedType:
		return fmt.Sprintf("req.%s.%s", helpers.ToCamelCase(e.Identifier), helpers.ToCamelCase(f.Identifier))
	case entity.InsertCurrentTimestampAutogeneratedType:
		return fmt.Sprintf("existing.%s", helpers.ToCamelCase(f.Identifier))
	case entity.UpdateCurrentTimestampAutogeneratedType:
		return "custom.Now()"
	case entity.CustomAutogeneratedType:
		return fmt.Sprintf("custom.%s%s%sUpdate(req, existing)", helpers.ToCamelCase(e.Identifier), helpers.ToCamelCase(f.Identifier), f.Autogenerated.FuncName)
	}
	return ""
}
