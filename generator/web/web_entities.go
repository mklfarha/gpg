package web

import (
	"context"
	"fmt"
	"path"
	"text/template"

	"github.com/maykel/gpg/entity"
	"github.com/maykel/gpg/generator"
	"github.com/maykel/gpg/generator/field"
	"github.com/maykel/gpg/generator/helpers"
)

func GenerateEntities(ctx context.Context, rootPath string, project entity.Project) error {
	fmt.Printf("--[GPG] Generating web entities\n")
	projectDir := generator.ProjectDir(ctx, rootPath, project)
	webDir := path.Join(projectDir, generator.WEB_DIR)
	for _, e := range project.Entities {
		generator.GenerateFile(ctx, generator.FileRequest{
			OutputFile:   path.Join(webDir, "src", "forms", fmt.Sprintf("%sForm.js", helpers.ToCamelCase(e.Identifier))),
			TemplateName: path.Join("web", "src", "forms", "entity_form"),
			Data: struct {
				Entity  entity.Entity
				Project entity.Project
			}{
				Entity:  e,
				Project: project,
			},
			DisableGoFormat: true,
			Funcs: template.FuncMap{
				"ToCamelCase": helpers.ToCamelCase,
				"IsGenerated": func(in entity.Field) bool {
					if in.Autogenerated.Type == entity.UUIDAutogeneratedType {
						return false
					}
					return in.Autogenerated.Type != entity.InvalidAutogeneratedType
				},
			},
		})

		for _, f := range e.Fields {
			if f.Type == entity.JSONFieldType {
				generator.GenerateFile(ctx, generator.FileRequest{
					OutputFile:   path.Join(webDir, "src", "forms", fmt.Sprintf("%s%sForm.js", helpers.ToCamelCase(e.Identifier), helpers.ToCamelCase(f.Identifier))),
					TemplateName: path.Join("web", "src", "forms", "entity_form"),
					Data: struct {
						Entity  entity.Entity
						Project entity.Project
					}{
						Entity: entity.Entity{
							Identifier: fmt.Sprintf("%s_%s", e.Identifier, f.Identifier),
							Fields:     f.JSONConfig.Fields,
						},
						Project: project,
					},
					DisableGoFormat: true,
					Funcs: template.FuncMap{
						"ToCamelCase": helpers.ToCamelCase,
						"IsGenerated": func(in entity.Field) bool {
							if in.Autogenerated.Type == entity.UUIDAutogeneratedType {
								return false
							}
							return in.Autogenerated.Type != entity.InvalidAutogeneratedType
						},
					},
				})
			}
		}
		generator.GenerateFile(ctx, generator.FileRequest{
			OutputFile:      path.Join(webDir, "src", "routes", fmt.Sprintf("%s.js", helpers.ToCamelCase(e.Identifier))),
			TemplateName:    path.Join("web", "src", "routes", "entity"),
			Data:            e,
			DisableGoFormat: true,
			Funcs: template.FuncMap{
				"ToCamelCase": helpers.ToCamelCase,
				"FieldTypeToString": func(t entity.FieldType) string {
					return t.String()
				},
				"UniqueFieldRefs": func(fields []entity.Field) []entity.Field {
					fieldMap := map[string]entity.Field{}
					for _, f := range fields {
						if f.EntityRef != "" {
							fieldMap[f.EntityRef] = f
						}
					}

					res := []entity.Field{}
					for _, f := range fieldMap {
						res = append(res, f)
					}

					return res
				},
			},
		})

		generator.GenerateFile(ctx, generator.FileRequest{
			OutputFile:      path.Join(webDir, "src", "routes", fmt.Sprintf("%sEdit.js", helpers.ToCamelCase(e.Identifier))),
			TemplateName:    path.Join("web", "src", "routes", "edit_entity"),
			Data:            e,
			DisableGoFormat: true,
			Funcs: template.FuncMap{
				"ToCamelCase": helpers.ToCamelCase,
				"GQLType": func(f entity.Field) string {
					t := field.ResolveFieldType(f, e, nil)
					return t.GraphInType
				},
				"JSDefault": func(f entity.Field) string {
					switch f.Type {

					case entity.UUIDFieldType:
						return "''"
					case entity.IntFieldType:
						return "0"
					case entity.FloatFieldType:
						return "0.0"
					case entity.BooleanFieldType:
						return "false"
					case entity.StringFieldType:
						return "''"
					case entity.LargeStringFieldType:
						return "''"
					case entity.JSONFieldType:
						if f.JSONConfig.Type == entity.ManyJSONConfigType {
							return "[]"
						}
						return "{}"
					case entity.OptionsSingleFieldType:
						return "''"
					case entity.OptionsManyFieldType:
						return "[]"
					case entity.DateFieldType:
						return "'1999-09-09'"
					case entity.DateTimeFieldType:
						return "'1999-09-09 09:09:09'"
					}
					return ""
				},
			},
		})
	}
	return nil
}
