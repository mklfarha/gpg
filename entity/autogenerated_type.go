package entity

import "encoding/json"

type AutogeneratedType int

const (
	InvalidAutogeneratedType AutogeneratedType = iota
	UUIDAutogeneratedType
	EncryptAutogeneratedType
	InsertCurrentTimestampAutogeneratedType
	UpdateCurrentTimestampAutogeneratedType
	CustomAutogeneratedType
)

func AutogeneratedTypeFromString(in string) AutogeneratedType {
	switch in {
	case "uuid":
		return UUIDAutogeneratedType
	case "encrypt":
		return EncryptAutogeneratedType
	case "insert_current_timestamp":
		return InsertCurrentTimestampAutogeneratedType
	case "update_current_timestamp":
		return UpdateCurrentTimestampAutogeneratedType
	case "custom":
		return CustomAutogeneratedType
	}
	return InvalidAutogeneratedType
}

func (t AutogeneratedType) String() string {
	switch t {
	case UUIDAutogeneratedType:
		return "uuid"
	case EncryptAutogeneratedType:
		return "encrypt"
	case InsertCurrentTimestampAutogeneratedType:
		return "insert_current_timestamp"
	case UpdateCurrentTimestampAutogeneratedType:
		return "update_current_timestamp"
	case CustomAutogeneratedType:
		return "custom"
	}

	return "invalid"
}

func (t *AutogeneratedType) UnmarshalJSON(data []byte) error {
	var item interface{}
	if err := json.Unmarshal(data, &item); err != nil {
		return err
	}
	switch v := item.(type) {
	case string:
		*t = AutogeneratedTypeFromString(string(v))
	}
	return nil
}

func (t *AutogeneratedType) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.String())
}
