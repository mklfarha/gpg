package auth

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/dgrijalva/jwt-go"
	"golang.org/x/crypto/bcrypt"
	"{{.Identifier}}/core/module/user/types"
)

func (i *Implementation) SignIn(w http.ResponseWriter, r *http.Request) {
	origin := r.Header.Get("origin")
	method := r.Method
	fmt.Printf("method: %v\n", method)
	w.Header().Set("Access-Control-Allow-Origin", origin)
	w.Header().Set("Access-Control-Allow-Methods", "POST, GET, OPTIONS, PUT, DELETE")
	w.Header().Set("Access-Control-Allow-Headers", "Accept, Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization")
	w.Header().Set("Accept", "application/json, multipart/mixed")
	w.Header().Set("Content-Type", "application/json")
	if method == "OPTIONS" {
		w.WriteHeader(http.StatusOK)
		return
	}
	var creds Credentials
	// Get the JSON body and decode into credentials
	err := json.NewDecoder(r.Body).Decode(&creds)
	if err != nil {
		// If the structure of the body is wrong, return an HTTP error
		w.WriteHeader(http.StatusBadRequest)
		fmt.Printf("error decoding: %v\n", err)
		return
	}
	ctx := context.Background()
	ctx, cancelFn := context.WithTimeout(ctx, time.Millisecond*500)
	userRes, err := i.core.User().FetchUserByEmail(ctx, types.FetchUserByEmailRequest{
		Email: creds.Email,
		Limit: 1,
	})
	defer cancelFn()

	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		fmt.Printf("error getting user: %v\n", err)
		return
	}

    if len(userRes.Results) == 0 {
        w.WriteHeader(http.StatusNotFound)
		fmt.Printf("user not found: %s\n", creds.Email)
		return
    }

    user := userRes.Results[0]

	err = bcrypt.CompareHashAndPassword([]byte(user.Password), []byte(creds.Password))
	if err != nil {
		w.WriteHeader(http.StatusUnauthorized)
		fmt.Printf("error comparing pwd: %v\n", err)
		return
	}

	// Declare the expiration time of the token
	// here, we have kept it as 5 minutes
	expirationTime := time.Now().Add(30 * 24 * time.Hour)
	// Create the JWT claims, which includes the username and expiry time
	claims := &Claims{
		Email: creds.Email,
		StandardClaims: jwt.StandardClaims{
			// In JWT, the expiry time is expressed as unix milliseconds
			ExpiresAt: expirationTime.Unix(),
		},
	}

	// Declare the token with the algorithm used for signing, and the claims
	token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)
	// Create the JWT string
	tokenString, err := token.SignedString(jwtKey)
	if err != nil {
		// If there is an error in creating the JWT return an internal server error
		w.WriteHeader(http.StatusInternalServerError)
		fmt.Printf("error generating token: %v\n", err)
		return
	}

	// Finally, we set the client cookie for "token" as the JWT we just generated
	// we also set an expiry time which is the same as the token itself
	http.SetCookie(w, &http.Cookie{
		Name:    "token",
		Value:   tokenString,
		Expires: expirationTime,
	})

	res := TokenResponse{
		Token:   tokenString,
		Expires: expirationTime,
	}
	resJson, _ := json.Marshal(res)
	w.Write(resJson)
}
