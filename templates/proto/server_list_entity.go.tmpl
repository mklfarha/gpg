package server

import (
	"context"
	"fmt"
	//"encoding/json"
	
	"{{.ProjectIdentifier}}/core/module/{{.FinalIdentifier}}/types"
	pb "{{.ProjectIdentifier}}/idl/gen"
	"{{.ProjectIdentifier}}/monitoring"
	pbmapper "{{.ProjectIdentifier}}/idl/mapper/{{.FinalIdentifier}}"

	"go.einride.tech/aip/filtering"
	"go.einride.tech/aip/ordering"
	"go.einride.tech/aip/pagination"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

func BuildList{{.NamePlural}}Request(ctx context.Context, request *pb.List{{.NamePlural}}Request) (types.ListRequest, *pagination.PageToken, error) {
	err := validatePageSizeForList{{.NamePlural}}(request)
	if err != nil {		
		return types.ListRequest{}, nil, err
	}

	// Use pagination.PageToken for offset-based page tokens.
	pageToken, err := pagination.ParsePageToken(request)
	if err != nil {		
		return types.ListRequest{}, nil, status.Errorf(codes.InvalidArgument, "invalid page token")
	}

	// parse filters
	declarations := {{.FinalIdentifier}}Declarations()	
	filter, err := filtering.ParseFilter(request, declarations)
	if err != nil {		
		return types.ListRequest{}, nil, err
	}

	/* // enable for debugginh
	if filter.CheckedExpr != nil {
		b, _ := json.Marshal(filter.CheckedExpr.Expr)
		fmt.Printf("filtering: %v \n", string(b))
	}
	*/

	orderBy, err := ordering.ParseOrderBy(request)
	if err != nil {		
		return types.ListRequest{}, nil, err
	}

	/* // enable for debugginh
	if orderBy.Fields != nil {
		b, _ := json.Marshal(orderBy.Fields)
		fmt.Printf("ordering: %v \n", string(b))
	}
	*/

	return types.ListRequest{
		Offset:                pageToken.Offset,
		PageSize:              request.GetPageSize(),
		Filter:                filter,
		FilteringDeclarations: declarations,
		OrderBy:               orderBy,
	}, &pageToken, nil
}

func (s *server) List{{.NamePlural}}(ctx context.Context, request *pb.List{{.NamePlural}}Request) (*pb.List{{.NamePlural}}Response, error) {
	
	req, pageToken, err := BuildList{{.NamePlural}}Request(ctx, request)
	if err != nil {
		s.monitoring.Emit(monitoring.EmitRequest{
			ActionIdentifier: "list_{{.FinalIdentifier}}_request",
			Message: "error building List{{.NamePlural}} request",
			EntityIdentifier: "{{.FinalIdentifier}}",
			Layer: monitoring.ProtocolServiceLayer,
			LayerSubtype: "protobuf",
			Type: monitoring.EmitTypeError,
			Data: request,			
			Error: err,		
		})
		return nil, err
	}

	// Query the storage.
	result, err := s.core.{{.Name}}().List(ctx, req)
	if err != nil {
		s.monitoring.Emit(monitoring.EmitRequest{
			ActionIdentifier: "list_{{.FinalIdentifier}}",
			Message: "error calling core in List{{.NamePlural}}",
			EntityIdentifier: "{{.FinalIdentifier}}",
			Layer: monitoring.ProtocolServiceLayer,
			LayerSubtype: "protobuf",
			Type: monitoring.EmitTypeError,
			Data: request,			
			Error: err,		
		})
		return nil, err
	}

	// Build the response.
	response := &pb.List{{.NamePlural}}Response{
		{{.NamePlural}}: pbmapper.{{.Name}}EntitiesToProto(result.{{.NamePlural}}),		
	}
	// Set the next page token.
	if result.HasNextPage {
		response.NextPageToken = pageToken.Next(request).String()
	}

	s.monitoring.Emit(monitoring.EmitRequest{
		ActionIdentifier: "list_{{.FinalIdentifier}}",
		Message: "successfully handled List{{.NamePlural}}",
		EntityIdentifier: "{{.FinalIdentifier}}",
		Layer: monitoring.ProtocolServiceLayer,
		LayerSubtype: "protobuf",
		Type: monitoring.EmitTypeSuccess,
		Data: request,				
	})
	// Respond.
	return response, nil
}

func validatePageSizeForList{{.NamePlural}}(request *pb.List{{.NamePlural}}Request) error {
	// Handle request constraints.
	const (
		maxPageSize     = 100
		defaultPageSize = 10
	)
	switch {
	case request.PageSize < 0:
		return status.Errorf(codes.InvalidArgument, "page size is negative")
	case request.PageSize == 0:
		request.PageSize = defaultPageSize
	case request.PageSize > maxPageSize:
		request.PageSize = maxPageSize
	}
	return nil
}

func {{.FinalIdentifier}}Declarations() *filtering.Declarations{
    declarations, err := filtering.NewDeclarations(
		filtering.DeclareStandardFunctions(),
		// boolean values 
		filtering.DeclareIdent("true", filtering.TypeBool),
		filtering.DeclareIdent("false", filtering.TypeBool),

        {{range $entityDeclaration := .Declarations}}
			//{{$entityDeclaration.Identifier}}
			{{range $field := $entityDeclaration.Fields}}				
				{{if eq $field.IsEnum true }} 
					filtering.DeclareEnumIdent("{{$field.Name}}", {{$field.Filtering}}),				
				{{else}} 
					filtering.DeclareIdent("{{$field.Name}}", {{$field.Filtering}}), {{end}}
			{{end}}
		{{end}}
    )
    if err != nil {
        fmt.Printf("error creating declarions:%v", err)
    }
    return declarations
}
