package server

import (
	"context"
	"errors"
	"{{.ProjectModule}}/core/module/{{.FinalIdentifier}}/types"
	pb "{{.ProjectModule}}/idl/gen"
	pbmapper "{{.ProjectModule}}/idl/mapper"
	"{{.ProjectModule}}/monitoring"
)

func (s *server) Create{{.Name}}(ctx context.Context, req *pb.Create{{.Name}}Request) (*pb.{{.Name}}, error) {
	res, err := s.core.{{.Name}}().Insert(ctx, types.UpsertRequest{
		{{.Name}}: pbmapper.{{.Name}}FromProto(req.Get{{.Name}}()),
	})
	if err != nil {
		s.monitoring.Emit(monitoring.EmitRequest{
			ActionIdentifier: "create_{{.FinalIdentifier}}",
			Message: "error calling core upsert in Create{{.Name}}",
			EntityIdentifier: "{{.FinalIdentifier}}",
			Layer: monitoring.ProtocolServiceLayer,
			LayerSubtype: "protobuf",
			Type: monitoring.EmitTypeError,
			Data: req,			
			Error: err,		
		})
		return nil, err
	}

	fetchRes, err := s.core.{{.Name}}().Fetch{{.Name}}By{{.PrimaryKey.Name}}(ctx, types.Fetch{{.Name}}By{{.PrimaryKey.Name}}Request(res))
	if err != nil {
		s.monitoring.Emit(monitoring.EmitRequest{
			ActionIdentifier: "create_{{.FinalIdentifier}}",
			Message: "error fetching after upsert in Create{{.Name}}",
			EntityIdentifier: "{{.FinalIdentifier}}",
			Layer: monitoring.ProtocolServiceLayer,
			LayerSubtype: "protobuf",
			Type: monitoring.EmitTypeError,
			Data: req,			
			Error: err,		
		})
		return nil, err
	}

	if len(fetchRes.Results) == 0 {
		err := errors.New("error fetching entity")
		s.monitoring.Emit(monitoring.EmitRequest{
			ActionIdentifier: "create_{{.FinalIdentifier}}",
			Message: "entity not found after upsert in Create{{.Name}}",
			EntityIdentifier: "{{.FinalIdentifier}}",
			Layer: monitoring.ProtocolServiceLayer,
			LayerSubtype: "protobuf",
			Type: monitoring.EmitTypeError,
			Data: req,			
			Error: err,		
		})
		return nil, err
	}

	s.monitoring.Emit(monitoring.EmitRequest{
		ActionIdentifier: "create_{{.FinalIdentifier}}",
		Message: "successfully handled Create{{.Name}}",
		EntityIdentifier: "{{.FinalIdentifier}}",
		Layer: monitoring.ProtocolServiceLayer,
		LayerSubtype: "protobuf",
		Type: monitoring.EmitTypeSuccess,
		Data: req,				
	})
	return pbmapper.{{.Name}}ToProto(fetchRes.Results[0]), nil
}
