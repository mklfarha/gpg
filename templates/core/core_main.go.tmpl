package core

import (	
	"database/sql"
	"errors"
	"fmt"
	"context"

	_ "github.com/go-sql-driver/mysql"
	"go.uber.org/config"
	"go.uber.org/fx"	
	{{.Identifier}}config "{{.Identifier}}/config"
	coretypes "{{.Identifier}}/core/types"
    {{$projectName := .Identifier}}
    {{range $entity := .Entities}}
    "{{$projectName}}/core/module/{{$entity.Identifier}}"	
    {{end}}	
	"{{.Identifier}}/core/repository"
	"{{.Identifier}}/monitoring"
	
	
)

type Implementation struct {
	db 			   *sql.DB
	repository     *repository.Implementation
    {{range $entity := .Entities}}
    {{$entity.Identifier}}       {{$entity.Identifier}}.Module
    {{end}}	
	monitoring *monitoring.Implementation
}

type Params struct {
	fx.In
	Provider config.Provider
	Lifecycle fx.Lifecycle	
	Monitoring *monitoring.Implementation
}

func New(params Params) (*Implementation, error) {

	var dbs {{.Identifier}}config.DBs
	if err := params.Provider.Get("db").Populate(&dbs); err != nil {
		return nil, err
	}

	if len(dbs) == 0 {
		return nil, errors.New("db configuration not found")
	}

	dbconfig := dbs[0]
	db, err := sql.Open(dbconfig.Driver, dbconfig.Path())
	if err != nil {
		return nil, fmt.Errorf("error connecting to DB: %v", err)
	}	
	db.SetConnMaxLifetime(0)
	db.SetMaxIdleConns(10)
	db.SetMaxOpenConns(0)
	repository := repository.New(db)

	if params.Lifecycle != nil {
		params.Lifecycle.Append(fx.Hook{
			OnStop: func(ctx context.Context) error {
				db.Close()
				return nil
			},
		})
	}

	return &Implementation{
		db: db,
		repository: repository,
		monitoring: params.Monitoring,
	}, nil
}

func (i *Implementation) Destroy() {
	i.db.Close()
}


{{range $entity := .Entities}}
func (i Implementation) {{$entity.Identifier | ToCamelCase}}() {{$entity.Identifier}}.Module {
	if i.{{$entity.Identifier}} == nil {
		i.{{$entity.Identifier}} = {{$entity.Identifier}}.New(coretypes.ModuleParams{
		 Repository:i.repository,
		 Monitoring: i.monitoring,
		})
	}
	return i.{{$entity.Identifier}}
}
{{end}}