package {{.Package}}

import (
	"fmt"
	"encoding/json"
)


//go:generate go run github.com/dmarkham/enumer -type={{.EnumName}} -json
type {{.EnumName}} int64

const (
	{{.EnumNameUpper}}_INVALID {{.EnumName}} = iota {{range $value := .Values}}
    {{$value}}{{end}}
)

func (e {{.EnumName}}) ToInt64() int64 {
    return int64(e)
}

{{$values := .Values}}
func {{.EnumName}}FromString(in string) {{.EnumName}} {
	switch in { {{range $i, $option := .Options}}
	case "{{$option.Identifier}}":
		return {{index $values $i}} {{end}}	
	}
	return {{.EnumNameUpper}}_INVALID
}

func {{.EnumName}}FromPointerString(in *string) {{.EnumName}} {
	if in == nil {
		return {{.EnumNameUpper}}_INVALID
	}
	return {{.EnumName}}FromString(*in)
}

{{$options := .Options}}
func (e {{.EnumName}}) String() string {
	switch e { {{range $i, $value := .Values}}
	case {{$value}}:
		return "{{(index $options $i).Identifier}}" {{end}}	
	}

	return "invalid"
}

func (e {{.EnumName}}) StringPtr() *string {
	val := e.String()
	return &val
}

func {{.EnumName}}SliceToJSON(in []{{.EnumName}}) json.RawMessage {
	res := make([]int64, len(in))
	for i, e := range in {
		res[i] = int64(e)
	}
	jr, err := json.Marshal(res)
	if err != nil {
		fmt.Printf("error marshalling {{.EnumName}} slice to json: %v", err)
		return json.RawMessage{}
	}
	return jr 
}

func JSONTo{{.EnumName}}Slice(in json.RawMessage) []{{.EnumName}} {
	res := []int64{}
	err := json.Unmarshal(in, &res)
	if err != nil {
		fmt.Printf("error unmarshing {{.EnumName}} slice to int slice: %v", err)
		return nil
	}
	if len(res) == 0 {
		return nil
	}
	finalRes := []{{.EnumName}}{}
	for _, r := range res {
		finalRes = append(finalRes, {{.EnumName}}(r))
	}
	return finalRes
}
