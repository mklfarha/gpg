package {{.Package}}

import (
    "encoding/json"
    {{$timeImport := false}}    
    {{range $import := .Imports}} {{if eq $import "time"}} {{$timeImport = true}} {{end}}
    "{{$import}}" {{end}}
    {{if eq .JSON true}}
    "fmt"
    {{end}}
    "{{.ProjectIdentifier}}/core/entity/types"
    {{ if and (ne (len .Fields) 0) (eq .UsesRandomValues true) }}
    "{{.ProjectIdentifier}}/core/randomvalues"
    {{ end }}
    "math/rand"
    {{if eq $timeImport false}}
    "time"
    {{end}}        
)

type {{.EntityName}} struct { {{range $field := .Fields}}
    {{$field.Name}} {{if eq $field.EnumMany true}}[]{{end}}{{if eq $field.JSONMany true}}[]{{end}}{{if eq $field.JSON true}}{{$field.JSONIdentifier}}.{{end}}{{$field.Type}} {{$field.Tags}}{{end}}
}

func (e {{.EntityName}}) String() string {
    res, _ := json.Marshal(e)
    return string(res)
}

func (e {{.EntityName}}) EntityIdentifier() string {    
    return "{{.Identifier}}"
}

{{if eq .JSON false}}
func (e {{.EntityName}}) PrimaryKeyIdentifier() string {    
    return "{{.PrimaryKeyIdentifier}}"
}

func (e {{.EntityName}}) PrimaryKeyValue() string {    
    return e.{{.PrimaryKeyName}}.String()
}
{{end}}

func (e {{.EntityName}}) FieldIdentfierToTypeMap() map[string]types.FieldType {
    res := make(map[string]types.FieldType)
    {{range $field := .Fields}}
    res["{{$field.Identifier}}"] = types.{{$field.GenFieldType}}{{end}}
    return res
}

{{if eq .JSON false}}
func (e {{.EntityName}}) DependantFieldIdentifierToTypeMap() map[string]map[string]types.FieldType {
    res := make(map[string]map[string]types.FieldType)
    {{range $field := .Fields}} {{if eq $field.JSON true}}
    res["{{$field.Identifier}}"] = {{$field.JSONIdentifier}}.{{$field.Type}}{}.FieldIdentfierToTypeMap(){{end}}{{end}}
    return res 
}
{{end}}

func (e {{.EntityName}}) ArrayFieldIdentifierToType() map[string]types.FieldType {
    res := make(map[string]types.FieldType)
    {{range $field := .Fields}} {{if eq $field.Array true}}
    res["{{$field.Identifier}}"] = types.{{$field.ArrayGenFieldType}}{{end}}{{end}}
    return res 
}


func (e {{.EntityName}}) IsDependant() bool {
    return {{.JSON}}
}
 
{{if eq .JSON true}}
func {{.EntityName}}FromJSON(data json.RawMessage) {{if eq .JSONField.JSONMany true}}[]{{end}}{{.EntityName}} {
    entity := {{if eq .JSONField.JSONMany true}}[]{{end}}{{.EntityName}}{}
    if err := json.Unmarshal(data, &entity); err != nil {
        fmt.Println("unmarshal error", err)
    }
    return entity
}

func (e {{.EntityName}}) {{.EntityName}}ToJSON() json.RawMessage {
    res, err := json.Marshal(e)
    if err != nil {
        fmt.Println("marshal error {{.EntityName}}ToJSON", err)
    }
    return res
}

{{if eq .JSONField.JSONMany true}}
func {{.EntityName}}SliceToJSON(e []{{.EntityName}}) json.RawMessage {
    if e == nil {
        return json.RawMessage{}
    }
    res, err := json.Marshal(e)
    if err != nil {
        fmt.Println("marshal error {{.EntityName}}SliceToJSON", err)
    }
    return res
}
{{end}}
{{end}}


func New{{.EntityName}}WithRandomValues() {{.EntityName}} {
    rand.New(rand.NewSource((time.Now().UnixNano())))
    return {{.EntityName}}{ {{range $field := .Fields}}
        {{$field.Name}}: {{$field.GenRandomValue}}, {{end}}
    }
}

func New{{.EntityName}}SliceWithRandomValues(n int) []{{.EntityName}} {
    rand.New(rand.NewSource((time.Now().UnixNano())))
    numRecords := n
    res := []{{.EntityName}}{}
    for i:=0; i<numRecords; i++{
        res = append(res, New{{.EntityName}}WithRandomValues())
    }
    return res
}
