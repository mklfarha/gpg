package mapper 

{{$mainEntityIdentifier := .Identifier}}
{{$mainEntityType := .EntityType}}
import (    
    "{{.ProjectModule}}/graph/model"    
    "{{.ProjectModule}}/core/entity/{{.Identifier}}"
    {{if ne .JSON true}}
    "{{.ProjectModule}}/core/module/{{.Identifier}}/types"    
    {{end}}
)

func Map{{.EntityType}}(in []{{.Identifier}}.{{.EntityType}}) []*model.{{.EntityType}} {
    res := []*model.{{.EntityType}}{}
    for _, item := range in {
        i := item
        res = append(res, &model.{{.EntityType}}{ {{range $field := .OutFields}}
            {{$field.GraphModelName}}: {{$field.GraphGenToMapper}},{{end}}           
        })
    }
    return res
}

func Map{{.EntityType}}Upsert(i model.{{.EntityType}}Input) types.UpsertRequest {
    return types.UpsertRequest{ 
        {{.EntityType}}:{{.Identifier}}.{{.EntityType}}{
        {{range $field := .OutFields}}
            {{if eq $field.Required true}}
            {{$field.Name}}: {{$field.GraphGenFromMapper}},{{else}}
            {{$field.Name}}: {{$field.GraphGenFromMapperOptional}},{{end}}
        {{end}}
        },
    }
}

func Map{{.EntityType}}UpsertPartial(i model.{{.EntityType}}PartialInput) types.UpsertRequest {
    return types.UpsertRequest{ 
        {{.EntityType}}:{{.Identifier}}.{{.EntityType}}{
        {{range $field := .OutFields}}
            {{if or (eq $field.IsPrimary true)}}
            {{$field.Name}}: {{$field.GraphGenFromMapper}},{{else}}
            {{$field.Name}}: {{$field.GraphGenFromMapperOptional}},{{end}}
            {{end}}
        },
    }
}

{{range $field := .OutFields}}
{{if and (eq $field.Enum true) (eq $field.EnumMany true)}}
// enums many 
func Map{{$mainEntityType}}{{$field.Type}}ToModel(in []{{$mainEntityIdentifier}}.{{.Type}}) []{{if eq .Required false}}*{{end}}string {
    res := []{{if eq .Required false}}*{{end}}string{}
    for _, i := range in {
        {{if eq .Required true}}
        res = append(res, i.String()){{else}}
        res = append(res, i.StringPtr()){{end}}
    }
    return res
}
func Map{{$mainEntityType}}{{$field.Type}}FromModel(in []string) []{{$mainEntityIdentifier}}.{{.Type}}{
    res := []{{$mainEntityIdentifier}}.{{$field.Type}}{}
    for _, i := range in {       
        res = append(res, {{$mainEntityIdentifier}}.{{.Type}}FromString(i))
    }
    return res
}
func Map{{$mainEntityType}}{{$field.Type}}FromModelOptional(in []*string) []{{$mainEntityIdentifier}}.{{.Type}}{
    res := []{{$mainEntityIdentifier}}.{{$field.Type}}{}
    for _, i := range in {        
        res = append(res, {{$mainEntityIdentifier}}.{{.Type}}FromPointerString(i))
    }
    return res
}
{{end}}
{{end}}
