package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
{{$projectName := .ProjectName}}
{{$disableSelectCombinations := .Project.DisableSelectCombinations}}
import (
	"context"
	"{{.ProjectName}}/graph/generated"
	"{{.ProjectName}}/graph/model"
    {{range $entity := .Entities}}
    {{$entity.Identifier}} "{{$projectName}}/core/module/{{$entity.Identifier}}/types"    
    {{$entity.Identifier}}entity "{{$projectName}}/core/entity/{{$entity.Identifier}}"    
    {{end}}	     
    "{{.ProjectName}}/graph/mapper"
    "{{.ProjectName}}/monitoring" 	
)
{{range $entity := .Entities}}
{{range $select := $entity.Selects}}
func (r *queryResolver) {{$select.Name}}(
    ctx context.Context, {{range $field := $select.Fields}}
    {{$field.Field.Identifier}} {{$field.Field.GraphGenType}},{{end}}
    {{if ne $select.IsPrimary true}}
    limit *int,
    offset *int,
    orderBy *string,
    sort *string,
    {{end}}
) ([]*model.{{$entity.EntityType}}, error) {
    request := {{$entity.Identifier}}.Fetch{{$select.Name}}Request{ {{range $field := $select.Fields}}
            {{$field.Field.Name}}: {{$field.Field.GraphGenFromMapperParam}},{{end}}
            {{if ne $select.IsPrimary true}}
            Limit: resolveLimit(limit),
            Offset: resolveOffset(offset),
            OrderBy: stringPointerToString(orderBy),
            Sort: stringPointerToString(sort),
            {{end}}
	    }
	res, err := r.core.{{$entity.EntityType}}().
    Fetch{{$select.Name}}(
        ctx, 
        request,
    )

    if err != nil {
        r.monitoring.Emit(monitoring.EmitRequest{
			ActionIdentifier: "fetch_{{$select.Identifier}}",
			Message: "error calling core in {{$select.Name}}",
			EntityIdentifier: "{{$entity.Identifier}}",
			Layer: monitoring.ProtocolServiceLayer,
            LayerSubtype: "graphql",
			Type: monitoring.EmitTypeError,
			Data: request,			
			Error: err,		
		})
        return nil, err
    }

    r.monitoring.Emit(monitoring.EmitRequest{
        ActionIdentifier: "fetch_{{$select.Identifier}}",
        Message: "succesfully handled {{$select.Name}}",
        EntityIdentifier: "{{$entity.Identifier}}",
        Layer: monitoring.ProtocolServiceLayer,
        LayerSubtype: "graphql",
        Type: monitoring.EmitTypeSuccess,
        Data: request,			
    })
	return mapper.Map{{$entity.EntityType}}(res.Results), nil
}
{{end}}

{{if eq $entity.Search true}}
func (r *queryResolver) Search{{$entity.EntityType}}(
    ctx context.Context,
    query string,
    limit *int, 
    offset *int,
) ([]*model.{{$entity.EntityType}}, error) {
    res, err := r.core.{{$entity.EntityType}}().
        Search(
            ctx, 
            query,
            resolveLimit(limit),
            resolveOffset(offset),
        )
    if err != nil {
        r.monitoring.Emit(monitoring.EmitRequest{
			ActionIdentifier: "search_{{$entity.Identifier}}",
			Message: "error calling core in Search{{$entity.Identifier}}",
			EntityIdentifier: "{{$entity.Identifier}}",
			Layer: monitoring.ProtocolServiceLayer,
            LayerSubtype: "graphql",
			Type: monitoring.EmitTypeError,
			ExtraData: map[string]string{"query":query},			
			Error: err,		
		})
        return nil, err
    }
    r.monitoring.Emit(monitoring.EmitRequest{
        ActionIdentifier: "search_{{$entity.Identifier}}",
        Message: "succesfully handled Search{{$entity.Identifier}}",
        EntityIdentifier: "{{$entity.Identifier}}",
        Layer: monitoring.ProtocolServiceLayer,
        LayerSubtype: "graphql",
        Type: monitoring.EmitTypeSuccess,
        ExtraData: map[string]string{"query":query},        
    })
	return mapper.Map{{$entity.EntityType}}(res.Results), nil
}
{{end}}

{{range $cq := $entity.CustomQueries}}
func (r *queryResolver) {{$cq.Name}}(
    {{$inputFields := ($cq | CustomQueryInputFields)}}
    ctx context.Context, {{range $field := $inputFields}}
    {{$field.Identifier}} {{$field.GraphGenType}},{{end}}   
    limit *int,
    offset *int,    
) ([]*model.{{$entity.EntityType}}, error) {
    request := {{$entity.Identifier}}.{{$cq.Name}}Request{ {{range $field := $inputFields}}
            {{$field.Name}}: {{$field.GraphGenFromMapperParam}},{{end}}            
            Limit: resolveLimit(limit),
            Offset: resolveOffset(offset),            
	    }
	res, err := r.core.{{$entity.EntityType}}().
    {{$cq.Name}}(
        ctx, 
        request,
    )

    if err != nil {
        r.monitoring.Emit(monitoring.EmitRequest{
			ActionIdentifier: "custom_{{$cq.Name}}",
			Message: "error calling core in custom {{$cq.Name}}",
			EntityIdentifier: "{{$entity.Identifier}}",
			Layer: monitoring.ProtocolServiceLayer,
            LayerSubtype: "graphql",
			Type: monitoring.EmitTypeError,
			Data: request,					
			Error: err,		
		})
        return nil, err
    }

    r.monitoring.Emit(monitoring.EmitRequest{
        ActionIdentifier: "custom_{{$cq.Name}}",
        Message: "succesfully handled custom {{$cq.Name}}",
        EntityIdentifier: "{{$entity.Identifier}}",
        Layer: monitoring.ProtocolServiceLayer,
        LayerSubtype: "graphql",
        Type: monitoring.EmitTypeSuccess,
        Data: request,			        
    })
	return mapper.Map{{$entity.EntityType}}(res.Results), err
}
{{end}}



{{end}}

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }

func resolveLimit(limit *int) int32 {
    if limit == nil {
        return int32(10)
    }
    return int32(*limit)
}

func resolveOffset(offset *int) int32 {
    if offset == nil {
        return int32(0)
    }
    return int32(*offset)
}

func stringPointerToString(in *string) string {
    if in == nil {
        return ""
    }
    return *in
}
