package mapper 

import (
    "fmt"
    "time"
    "github.com/gofrs/uuid"
    "encoding/json"    
)

func ParseTime(in string) time.Time {
    t, err := time.Parse("2006-01-02 15:04:05", in)
    if err != nil {
        fmt.Printf("error parsing date %v", err)
    }
    return t
}

func ParseTimeFromPointer(in *string) time.Time {
    if in == nil {
        return time.Time{}
    }
    t, err := time.Parse("2006-01-02 15:04:05", *in)
    if err != nil {
        fmt.Printf("error parsing date %v", err)
    }
    return t
}

func ParseDate(in string) time.Time {
    t, err := time.Parse("2006-01-02", in)
    if err != nil {
        fmt.Printf("error parsing date %v", err)
    }
    return t
}

func ParseDateFromPointer(in *string) time.Time {
    if in == nil {
        return time.Time{}
    }
    t, err := time.Parse("2006-01-02", *in)
    if err != nil {
        fmt.Printf("error parsing date %v", err)
    }
    return t
}

func FormatDateToPointer(date time.Time) *string {
    str := date.Format("2006-01-02")
    return &str
}

func FormatTimeToPointer(date time.Time) *string {
    str := date.Format("2006-01-02 15:04:05")
    return &str
}

func StringFromPointer(in *string) string {
    if in == nil {
        return ""
    }
    return *in
}

func IntFromPointer(in *int) int64 {
    if in == nil {
        return int64(0)
    }
    return int64(*in)
}

func IntPointer(in int64) *int {    
    res := int(in)    
    return &res
}

func FloatFromPointer(in *float64) float64 {
    if in == nil {
        return 0.0
    }
    return *in
}

func UuidToPointerString(u uuid.UUID) *string {
    if u == uuid.Nil {
        return nil
    }
    str := u.String()
    return &str
}

func UuidFromPointerString(i *string) uuid.UUID {
    if i == nil {
        return uuid.Nil
    }    
    return uuid.FromStringOrNil(*i)
}

func UuidFromStringOrNil(i string) uuid.UUID{
    return uuid.FromStringOrNil(i)
}

func BoolFromPointer(i *bool) bool {
    if i == nil {
        return false
    }
    return *i
}

func StringFromJsonRaw(in *json.RawMessage) *string {
	res, _ := in.MarshalJSON()
	resStr := string(res)
	return &resStr
}

func JsonRawFromString(in *string) json.RawMessage {
	res, _ := json.Marshal(in)
	return res
}

func MapUUIDSlice(uuids []uuid.UUID) []string {
	res := []string{}
	for _, u := range uuids {
		res = append(res, u.String())
	}
	return res
}

func MapIntSlice(is []int64) []int {
	res := []int{}
	for _, i := range is {
		res = append(res, int(i))
	}
	return res
}

func MapDateSlice(ds []time.Time) []string {
	res := []string{}
	for _, d := range ds {
		res = append(res, d.Format("2006-01-02"))
	}
	return res
}

func MapDatetimeSlice(ds []time.Time) []string {
	res := []string{}
	for _, d := range ds {
		res = append(res, d.Format("2006-01-02 15:04:05"))
	}
	return res
}

func MapToUUIDSlice(ss []string) []uuid.UUID {
	res := []uuid.UUID{}
	for _, s := range ss {
		res = append(res, UuidFromStringOrNil(s))
	}
	return res
}

func MapToIntSlice(is []int) []int64 {
	res := []int64{}
	for _, i := range is {
		res = append(res, int64(i))
	}
	return res
}

func MapToDateSlice(ds []string) []time.Time {
	res := []time.Time{}
	for _, d := range ds {
		res = append(res, ParseDate(d))
	}
	return res
}

func MapToDatetimeSlice(ds []string) []time.Time {
	res := []time.Time{}
	for _, d := range ds {
		res = append(res, ParseTime(d))
	}
	return res
}
