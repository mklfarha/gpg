package graph

import (	
	"{{.Identifier}}/core"
	"{{.Identifier}}/monitoring"

	"go.uber.org/config"
	"go.uber.org/fx"
	"go.uber.org/zap"

    "github.com/99designs/gqlgen/graphql/handler"
    "{{.Identifier}}/graph/generated"
    "net/http"
    "github.com/99designs/gqlgen/graphql/playground"
    
    {{ if eq .Auth.Enabled true}}
	"{{.Identifier}}/auth"
    {{ end }}
)

type Params struct {
	fx.In
	Logger *zap.Logger
	Lifecycle fx.Lifecycle
	Core   *core.Implementation
	Config config.Provider
    {{ if eq .Auth.Enabled true}}
	Auth   auth.Interface
	{{ end }}
	Monitoring *monitoring.Implementation
}

func New(params Params) *handler.Server {
    server := handler.NewDefaultServer(
                    generated.NewExecutableSchema(
                        generated.Config{
                            Resolvers: &Resolver{
                                core: params.Core,
								monitoring: params.Monitoring,
                            }}))
   
	{{ if eq .Auth.Enabled true}}
    http.Handle("/gplay", params.Auth.BasicAuth(params.Config, playground.Handler("GraphQL playground", "/query")))	
	{{else}}
	http.Handle("/gplay", playground.Handler("GraphQL playground", "/query"))
	{{end}}
    http.Handle("/query", serverHTTPHandler(server {{ if eq .Auth.Enabled true}}, params.Auth {{end}}))
    return server
}

func serverHTTPHandler(server *handler.Server,
             {{ if eq .Auth.Enabled true}}, auth   auth.Interface, {{end}}
            ) http.HandlerFunc {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {

		origin := r.Header.Get("origin")
		method := r.Method		
		w.Header().Set("Access-Control-Allow-Origin", origin)
		w.Header().Set("Access-Control-Allow-Methods", "POST, GET, OPTIONS, PUT, DELETE")
		w.Header().Set("Access-Control-Allow-Headers", "Accept, Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization")
		w.Header().Set("Accept", "application/json, multipart/mixed")
		w.Header().Set("Content-Type", "application/json")
		if method == "OPTIONS" {
			w.WriteHeader(http.StatusOK)
			return
		}

		{{ if eq .Auth.Enabled true }}
		claims, err := auth.ClaimsFromHeader(w, r)
		if err != nil {
			fmt.Printf("auth err: %v\n", err)
			w.Header().Set("WWW-Authenticate", `Basic realm="restricted", charset="UTF-8"`)
			http.Error(w, "Unauthorized", http.StatusUnauthorized)
		}		
		fmt.Printf("claims: %v\n", claims)
		{{ end }}
		
		
		server.ServeHTTP(w, r)
	})

}

