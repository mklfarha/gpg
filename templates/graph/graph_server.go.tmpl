package graph

import (	
	"{{.Identifier}}/core"
	"{{.Identifier}}/monitoring"

	"go.uber.org/config"
	"go.uber.org/fx"
	"go.uber.org/zap"

    "github.com/99designs/gqlgen/graphql/handler"
    "{{.Identifier}}/graph/generated"
    "net/http"
    "github.com/99designs/gqlgen/graphql/playground"

	"{{.Identifier}}/auth"  
	"fmt"  
)

type Params struct {
	fx.In
	Logger *zap.Logger
	Lifecycle fx.Lifecycle
	Core   *core.Implementation
	Config config.Provider
    {{ if ne .AuthImport ""}}
	Auth   auth.Interface
	{{ end }}
	Monitoring *monitoring.Implementation
}

func New(params Params) *handler.Server {
	log := params.Logger
    server := handler.NewDefaultServer(
                    generated.NewExecutableSchema(
                        generated.Config{
                            Resolvers: &Resolver{
                                core: params.Core,
								monitoring: params.Monitoring,
                            }}))
   
	
    http.Handle("/gplay", auth.BasicAuth(params.Config, playground.Handler("GraphQL playground", "/query")))		
    http.Handle("/query", serverHTTPHandler(server, params.Monitoring {{ if ne .AuthImport ""}}, params.Auth {{end}}))
	log.Info(`Serving GRAPHQL HTTP: /gplay, /query`)
    return server
}

func serverHTTPHandler(server *handler.Server,
			m *monitoring.Implementation,
            {{ if ne .AuthImport ""}}auth   auth.Interface, {{end}}
            ) http.HandlerFunc {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {

		origin := r.Header.Get("origin")
		method := r.Method		
		w.Header().Set("Access-Control-Allow-Origin", origin)
		w.Header().Set("Access-Control-Allow-Methods", "POST, GET, OPTIONS, PUT, DELETE")
		w.Header().Set("Access-Control-Allow-Headers", "Accept, Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization")
		w.Header().Set("Accept", "application/json, multipart/mixed")
		w.Header().Set("Content-Type", "application/json")
		if method == "OPTIONS" {
			w.WriteHeader(http.StatusOK)
			return
		}

		{{ if ne .AuthImport ""}}
		// the client will set the corresponding header 		
		err := auth.HandleHTTP(w, r)		
		if err != nil {
			fmt.Printf("error handling auth for request: %v\n\n",err)
			m.Emit(monitoring.EmitRequest{
				ActionIdentifier: "invalid_auth",
				Message: "error handling auth",				
				Layer: monitoring.ProtocolServiceLayer,
				LayerSubtype: "graphql",
				Type: monitoring.EmitTypeError,				
				Error: err,		
			})
			return 
		}
		{{ end }}

		server.ServeHTTP(w, r)
	})

}

